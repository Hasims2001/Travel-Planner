from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
import json
import datetime
import jwt
import os
from dotenv import load_dotenv
from passlib.hash import pbkdf2_sha256 
app = Flask(__name__)
load_dotenv()
SECRET_KEY = "secret_key" # os.getenv("APP_SECRET_KEY")
app.secret_key = "secret" # os.getenv("SECRET_KEY")
app.config["SQLALCHEMY_DATABASE_URI"] = "sqlite:///TravelPlannerDB.sqlite3" # os.getenv("DATABASE_URI")
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)



class Users(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    email = db.Column(db.String(255), nullable=False)
    role = db.Column(db.String(10), nullable=False)
    password = db.Column(db.String(255), nullable=False)
    token= db.Column(db.String(500))

    def __init__(self, name, email, role, password, token):
        self.name = name
        self.email = email
        self.role = role
        self.password = password
        self.token = token


class Destination(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    description = db.Column(db.Text)
    rating = db.Column(db.Float, default=0.0)
    pincode = db.Column(db.Integer, nullable=False)
    country = db.Column(db.String(255), nullable=False)

    def __init__(self, name, description, rating, pincode, country):
        self.name = name
        self.description = description
        self.rating = rating
        self.pincode = pincode
        self.country = country

class Itinerary(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    destination_id = db.Column(db.Integer, db.ForeignKey('destination.id'))
    date = db.Column(db.Date)
    activity = db.Column(db.String(255))
    expense = db.Column(db.Float)

    def __ini__(self, destination_id, date, activity, expense):
        self.destination_id = destination_id
        self.date = date
        self.activity = activity
        self.expense = expense


@app.route('/')
def welcome():
    return jsonify({'message': 'Welcome to Wanderlust Travel Planner'})

@app.route("/login", methods=['POST'])
def loginUser():
    data = request.get_json()
    allUsers = Users.query.all()
    for user in allUsers:
        if(user.email == data['email'] and pbkdf2_sha256.verify(data['password'], user.password)):
            token = jwt.encode({"user": {'email': user.email, 'role': user.role}}, SECRET_KEY, algorithm='HS256')
            user.token = token
            db.session.commit()
            return jsonify({'issue': False, 'token': token,  'message': "login success"})
    
    return jsonify({'issue': True, 'message': 'Invalid user data'})


@app.route('/register', methods=['POST'])
def registerUser():
    try:
        data = request.get_json()
        users = Users.query.all()
        
        for user in users:
            if(user.email == data['email']):
                return jsonify({'issue': True,  'message': "email is already present in database"})

        hashed = pbkdf2_sha256.using(rounds=10, salt_size=16).hash(data['password'])
        new_user = Users(name=data['name'], email=data['email'], password=hashed, role=data['role'])
        db.session.add(new_user)
        db.session.commit()
        return jsonify({'issue': False, 'message': 'register success'})
    except Exception as e:
        return jsonify({'issue': True, 'message':str(e)})


@app.route("/profile", methods=['POST'])
def udpateProfile():
    try:
        token = request.headers.get('Authorization')
        decoded_token = jwt.decode(token, SECRET_KEY, algorithms=['HS256'])
        user_data = decoded_token['user']
        user = Users.query.filter_by(email=user_data['email']).first()
        data = request.get_json()
        if 'name' in data:
            user.name = data['name']
        if 'address' in data:
            user.address = data['address']
        if 'pincode' in data:
            user.pincode = data['pincode']

        db.session.commit()
        return jsonify({'issue': False,'message': f'user data updated successfully!'})
    except Exception as e:
        return jsonify({'issue': True, 'message': str(e)})

if __name__ == '__main__':
    app.run(debug=True)